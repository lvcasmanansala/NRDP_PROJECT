"""
Django settings for ndrppcwp project.

Generated by 'django-admin startproject' using Django 3.2.14.

For more information on this file, see
https://docs.djangoproject.com/en/3.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/3.2/ref/settings/
"""


from pathlib import Path
from typing import List

from django.contrib.messages import constants as messages
from django.core.signing import Signer
import os
from dotenv import load_dotenv

load_dotenv()
# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent
TEMPLATE_DIR = os.path.join(BASE_DIR, 'ndrppcwp_app/templates')
TEMPLATE_DIR_ADMIN = os.path.join(BASE_DIR, 'admin_app/templates')
STATIC_DIR = os.path.join(BASE_DIR, 'ndrppcwp_app/static')
MEDIA_DIR = os.path.join(BASE_DIR, 'ndrppcwp_app/media')


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/3.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = os.getenv("SECRET_KEY", "*")
FERNET_KEY = os.getenv("FERNET_KEY")
IIS_IP = os.getenv("IIS_IP")
GOOGLE_RECAPTCHA_SECRET_KEY = os.getenv("reCAPTCHA_SECRET_KEY")
# SECURITY WARNING: don't run with debug turned on in production! 
DEBUG = int(os.environ.get("DEBUG", default=0))

ALLOWED_HOSTS = os.environ.get("DJANGO_ALLOWED_HOSTS", "*").split(" ")


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'django.contrib.humanize', 
    'ndrppcwp_app',
    'admin_app',
    'import_export',
    'django_cleanup',
    'corsheaders',
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    'corsheaders.middleware.CorsMiddleware', 
]

X_FRAME_OPTIONS = 'SAMEORIGIN'

ROOT_URLCONF = 'ndrppcwp.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [TEMPLATE_DIR, TEMPLATE_DIR_ADMIN],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'ndrppcwp.wsgi.application'


# Database
# https://docs.djangoproject.com/en/3.2/ref/settings/#databases
 
 
DATABASES = {
    "default": {
        "ENGINE": os.environ.get("SQL_ENGINE", "django.db.backends.sqlite3"),
        "NAME": os.environ.get("SQL_DATABASE", BASE_DIR / "db.sqlite3"),
        "USER": os.environ.get("SQL_USER", "user"),
        "PASSWORD": os.environ.get("SQL_PASSWORD", "password"),
        "HOST": os.environ.get("SQL_HOST", "localhost"),
        "PORT": os.environ.get("SQL_PORT", "5432"),
    }
}
 


# Password validation
# https://docs.djangoproject.com/en/3.2/ref/settings/#auth-password-validators
PASSWORD_HASHERS = [
    'django.contrib.auth.hashers.Argon2PasswordHasher',
    'django.contrib.auth.hashers.BCryptSHA256PasswordHasher',
    'django.contrib.auth.hashers.BCryptPasswordHasher',
    'django.contrib.auth.hashers.PBKDF2PasswordHasher',
    'django.contrib.auth.hashers.PBKDF2SHA1PasswordHasher',
]

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/3.2/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'Asia/Manila'

USE_I18N = True

USE_L10N = True

USE_TZ = True

DATE_INPUT_FORMATS = ['%m/%d/%Y',]

# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/3.2/howto/static-files/
STATIC_URL = '/static/'
STATIC_ROOT = os.path.join(BASE_DIR, 'static') 

MEDIA_URL = '/media/' 
MEDIA_ROOT = MEDIA_DIR

# Default primary key field type
# https://docs.djangoproject.com/en/3.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'


LOGIN_URL = '/admin'
LOGOUT_URL = 'logout'

LOGIN_REDIRECT_URL = '/admin'
#LOGOUT_REDIRECT_URL = '/admin'
LOGOUT_REDIRECT_URL = '/api/iis/logout/landing-page/'
MESSAGE_TAGS = {
    messages.DEBUG: 'alert-info',
    messages.INFO: 'alert-info',
    messages.SUCCESS: 'alert-success',
    messages.WARNING: 'alert-warning',
    messages.ERROR: 'alert-danger',
}

SESSION_EXPIRE_AT_BROWSER_CLOSE = True
  
CORS_ALLOWED_ORIGINS = [
    'https://iis.emb.gov.ph',
]

 
EMAIL_HOST = 'smtp.outlook.office365.com' 
EMAIL_PORT = 587
EMAIL_HOST_USER = os.getenv("EMAIL_HOST_USER")
EMAIL_HOST_PASSWORD = os.getenv("EMAIL_HOST_PASSWORD")
DEFAULT_FROM_EMAIL = EMAIL_HOST_USER
EMAIL_FROM = EMAIL_HOST_USER
SERVER_EMAIL = EMAIL_HOST_USER
EMAIL_BACKEND = 'django.core.mail.backends.smtp.EmailBackend' 
EMAIL_USE_TLS = True
EMAIL_TIMEOUT = 20

LOGGING = {
     'version': 1,
     'disable_existing_loggers': False,
     'loggers': {
         'django':{
             'handlers': ['lab_debug', 'lab_info', 'lab_warning', 'lab_error', 'lab_critical'],
             'level': 'DEBUG'
         }
     },
     'handlers': {
         'lab_debug': {
             'level': 'DEBUG',
             'class': 'logging.FileHandler',
             'filename': './logs/debug.log',
             'formatter': 'logsformat',
         },
         'lab_info': {
             'level': 'INFO',
             'class': 'logging.FileHandler',
             'filename': './logs/info.log',
             'formatter': 'logsformat',
         },
         'lab_warning': {
             'level': 'WARNING',
             'class': 'logging.FileHandler',
             'filename': './logs/warning.log',
             'formatter': 'logsformat',
         },
         'lab_error': {
             'level': 'ERROR',
             'class': 'logging.FileHandler',
             'filename': './logs/error.log',
             'formatter': 'logsformat',
         },
         'lab_critical': {
             'level': 'CRITICAL',
             'class': 'logging.FileHandler',
             'filename': './logs/critical.log',
             'formatter': 'logsformat',
         },
     },
     'formatters': {
         'logsformat': {
             'format': '{levelname} {asctime} {module} {process:d} {thread:d} {message}',
             'style': '{',
         }
     },
}
